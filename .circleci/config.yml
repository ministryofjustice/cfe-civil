version: 2.1

parameters:
  approval_job_name:
    type: string
    default: "deploy_uat_approval"
  approval_required:
    type: boolean
    default: false

orbs:
  slack: circleci/slack@4.5.2

executors:
  basic-executor:
    docker:
      - image: cimg/base:2020.01
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.3.0
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-estimate-eligibility
  linting-executor:
    docker:
      - image: cimg/ruby:3.2.2-node
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small
  test-executor:
    docker:
      - image: cimg/ruby:3.2.2-node
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
      - image: cimg/postgres:14.8
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=cfe_civil_test
  ccq-executor:
    docker:
      - image: cimg/ruby:3.1.3-browsers
        environment:
          VCR_RECORD_MODE: none
          COVERAGE: true
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: postgres
          TZ: "Europe/London"
          CFE_HOST: http://localhost:3000
      - image: cimg/postgres:14.8
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: ccq_test
      - image: ${ECR_ENDPOINT}:${CIRCLE_SHA1}
        environment:
          - RAILS_ENV: production
          - LEGAL_FRAMEWORK_API_HOST: https://legal-framework-api-staging.cloud-platform.service.justice.gov.uk
          - SECRET_KEY_BASE: any_old_secret_key_base
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: postgres
          - POSTGRES_PASSWORD: cfe_ccq_pass
          - POSTGRES_DATABASE: cfe_db
          - PROBE_TIMEOUT: 60
          - TZ: "Europe/London"

references:
  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .

  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}:latest"
          docker push "${ECR_ENDPOINT}:latest"
        fi

  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${ECR_ENDPOINT}
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${K8S_TOKEN}
        kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_UAT_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME}

  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client cmake
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - cfe-civil-gems-{{ checksum "Gemfile.lock" }}
        - cfe-civil-gems
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        sudo gem update --system
        bundle install --without development --path=vendor/bundle --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: cfe-civil-gems-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  restore_helm_cache: &restore_helm_cache
    restore_cache:
      keys:
        - cfe-civil-helm-{{ checksum "deploy/helm/Chart.lock" }}
        - cfe-civil-helm
  save_helm_cache: &save_helm_cache
    save_cache:
      key: cfe-civil-helm-{{ checksum "deploy/helm/Chart.lock" }}
      paths:
        - deploy/helm/charts
  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:schema:load
        bundle exec rake db:migrate

jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command:  bundle exec rubocop

  create_helm_cache:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *restore_helm_cache
      - run:
          name: Grab postgres chart from bitnami
          working_directory: deploy/helm
          command: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm dependency build
      - *save_helm_cache

  end2end_tests:
    executor: ccq-executor
    steps:
      - run:
          name: Checkout CCQ main line
          command: |
            git clone https://github.com/ministryofjustice/laa-estimate-financial-eligibility-for-legal-aid.git ~/project/ccq
      - run:
          name: Setup CCQ ready to execute tests
          working_directory: ~/project/ccq
          command: |
            bundle install --without=development
      - run:
          name: Setup CCQ database and test env
          working_directory: ~/project/ccq
          command: |
            bundle exec rails db:schema:load
            bundle exec rake test:prepare
      - run:
          name: CFE/CCQ end2end specs
          working_directory: ~/project/ccq
          command: |
            COVERAGE=false bundle exec rspec -t end2end --format documentation spec/**/*_spec.rb

  unit_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
            ./tmp/cc-test-reporter before-build
      - run:
          name: Run ruby tests
          command: |
            bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
      - run:
          name: Format Code Climate Test Coverage
          command: |
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/coverage/codeclimate.json
      - run:
          name: Upload Code Climate Test coverage
          command: |
            ./tmp/cc-test-reporter upload-coverage -i tmp/coverage/codeclimate.json
      - run:
          name: Check coverage with undercover
          command: |
            bundle exec undercover -l coverage/lcov.info
      - store_test_results:
          path: /tmp/test-results/rspec
      - store_artifacts:
          path: ./coverage

  integration_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Run cucumber tests
          command: |
            bundle exec cucumber --format html --out report.html --format pretty
      - store_artifacts:
          path: ./report.html

  check_swagger:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Check for unapplied swagger documentation specs
          command: |
            bundle exec rails check_swaggerization

  build_and_push:
    executor: basic-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - *update_packages
      - *build_docker_image
      - *setup_aws_login
      - *push_to_ecr

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - deploy:
          name: Helm deployment to UAT
          command: |
            ./bin/uat_deploy

  deploy_main_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - deploy:
          name: Helm deploy CFE Civil to Staging
          command: |
            helm upgrade cfe-civil ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values/staging.yaml \
                          --set image.repository="$ECR_ENDPOINT" \
                          --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - deploy:
          name: Helm deploy CFE Civil to Production
          command: |
            helm upgrade cfe-civil ./deploy/helm/. \
                            --install --wait \
                            --namespace=${K8S_NAMESPACE}  \
                            --values ./deploy/helm/values/production.yaml \
                            --set image.repository="$ECR_ENDPOINT" \
                            --set image.tag="${CIRCLE_SHA1}" \

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s
      - run:
          name: Delete dependabot deployment
          command: |
            ./bin/delete_dependabot_deployment

  clean_up_ecr:
    executor: linting-executor
    steps:
      - checkout
      - setup_remote_docker
      - *setup_aws_login
      - run:
          name: Delete old images from ecr repo
          command: |
            ./bin/clean_up_ecr

  deploy_infrastructure_uat:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *authenticate_k8s
      - deploy:
          name: Deploy UAT infrastructure (Grafana etc)
          command: |
            kubectl apply --record=false -f ./infrastructure/uat/

workflows:
  version: 2
  add_branch:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - create_helm_cache:
          filters:
            branches:
              ignore: main
      - end2end_tests:
          filters:
            branches:
              ignore: main
          requires:
            - build_and_push
            - create_helm_cache
      - integration_tests:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - check_swagger:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - build_and_push:
          filters:
            branches:
              ignore: main
      #          <<: *generic-slack-fail-post-step
      - deploy_uat_approval:
          type: approval
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
            - end2end_tests
      - deploy_uat_without_approval:
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
            - end2end_tests
      - deploy_uat:
          context: cfe-civil-uat
          requires:
            - << pipeline.parameters.approval_job_name >>
      - delete_dependabot_deployment:
          context: cfe-civil-uat
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
            - deploy_uat
  #          <<: *generic-slack-fail-post-step
      - deploy_infrastructure_uat:
          context: cfe-civil-uat
          filters:
            branches:
              only:
                - main

  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-step
      - unit_tests:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-step
      - end2end_tests:
          filters:
            branches:
              only: main
          requires:
            - build_and_push
            - create_helm_cache
      - integration_tests:
          filters:
            branches:
              only: main
      - create_helm_cache:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-stepa
      - check_swagger:
          filters:
            branches:
              only: main
      #          <<: *generic-slack-fail-post-step
      - build_and_push:
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
      #          <<: *generic-slack-fail-post-step
      - deploy_main_uat:
          context: cfe-civil-uat
          requires:
            - end2end_tests
      #          <<: *generic-slack-fail-post-step
      - deploy_staging:
          context: cfe-civil-staging
          requires:
            - end2end_tests
          filters:
            branches:
              only:
                - main
      - deploy_production_approval:
          type: approval
          requires:
            - end2end_tests
          filters:
            branches:
              only:
                - main
      - deploy_production:
          context: cfe-civil-production
          requires:
            - deploy_production_approval
          filters:
            branches:
              only:
                - main

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: main
    jobs:
      - clean_up_ecr
