version: 2.1

parameters:
  approval_required:
    type: boolean
    default: true

orbs:
  slack: circleci/slack@4.12.5
  aws-cli: circleci/aws-cli@4.1.2
  aws-ecr: circleci/aws-ecr@9.0

executors:
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.3.0
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-estimate-eligibility
  linting-executor:
    docker:
      - image: cimg/ruby:3.3.0-node
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  notification-executor:
    docker:
      - image: 'cibuilds/base:latest'
        environment:
          TERM: dumb
    resource_class: small
  test-executor:
    docker:
      - image: cimg/ruby:3.3.0-node
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
          - RUBY_YJIT_ENABLE: "1"
      - image: cimg/postgres:14.8
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=cfe_civil_test
  ccq-executor:
    docker:
      - image: cimg/ruby:3.2.2-browsers
        environment:
          VCR_RECORD_MODE: none
          COVERAGE: true
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: postgres
          TZ: "Europe/London"
          CFE_HOST: http://localhost:3000
      - image: cimg/postgres:14.8
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: ccq_test
      - image: ${ECR_ENDPOINT}:${CIRCLE_SHA1}
        aws_auth:
          oidc_role_arn: $ECR_ROLE_TO_ASSUME
        environment:
          - RAILS_ENV: production
          - LEGAL_FRAMEWORK_API_HOST: https://legal-framework-api-staging.cloud-platform.service.justice.gov.uk
          - SECRET_KEY_BASE: any_old_secret_key_base
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: postgres
          - POSTGRES_PASSWORD: cfe_ccq_pass
          - POSTGRES_DATABASE: cfe_db
          - PROBE_TIMEOUT: 60
          - TZ: "Europe/London"

commands:
  build_and_push:
    parameters:
      docker_tag:
        description: Destination docker_tag
        type: string
    steps:
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build_image:
          push_image: true
          account_id: $AWS_ECR_REGISTRY_ID
          tag: ${CIRCLE_SHA1},<< parameters.docker_tag >>
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var

  # The intent here is to slack notify *only* for main/production failures which the team tend not to spot
  notify_slack_on_failure:
    steps:
      - slack/notify:
          channel: laa-eligibility-platform-alerts-prod
          event: fail
          branch_pattern: main
          template: basic_fail_1

references:
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${K8S_TOKEN}
        kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_UAT_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME}

  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client cmake

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - cfe-civil-gems-{{ checksum "Gemfile.lock" }}
        - cfe-civil-gems

  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        sudo gem update --system
        bundle config set --local frozen 'true'
        bundle config set --local path 'vendor/bundle'
        bundle config set --local without 'development'
        bundle install --jobs=4 && bundle clean

  save_gems_cache: &save_gems_cache
    save_cache:
      key: cfe-civil-gems-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  restore_helm_cache: &restore_helm_cache
    restore_cache:
      keys:
        - cfe-civil-helm-{{ checksum "deploy/helm/Chart.lock" }}
        - cfe-civil-helm

  save_helm_cache: &save_helm_cache
    save_cache:
      key: cfe-civil-helm-{{ checksum "deploy/helm/Chart.lock" }}
      paths:
        - deploy/helm/charts

  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:schema:load
        bundle exec rake db:migrate

jobs:
  lint_checks:
    executor: linting-executor
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command:  bundle exec rubocop
      - notify_slack_on_failure

  create_helm_cache:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *restore_helm_cache
      - run:
          name: Grab postgres chart from bitnami
          working_directory: deploy/helm
          command: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm dependency build
      - *save_helm_cache
      - notify_slack_on_failure

  end2end_tests:
    executor: ccq-executor
    steps:
      - run:
          name: Checkout CCQ main line
          command: |
            git clone https://github.com/ministryofjustice/laa-estimate-financial-eligibility-for-legal-aid.git ~/project/ccq
      - run:
          name: Setup CCQ ready to execute tests
          working_directory: ~/project/ccq
          command: |
            bundle install --without=development
      - run:
          name: Setup CCQ database and test env
          working_directory: ~/project/ccq
          command: |
            bundle exec rails db:schema:load
            bundle exec rake test:prepare
      - run:
          name: CFE/CCQ end2end specs
          working_directory: ~/project/ccq
          command: |
            COVERAGE=false bundle exec rspec -t end2end --format documentation spec/**/*_spec.rb
      - notify_slack_on_failure

  unit_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Run ruby tests
          command: |
            bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec/rspec.xml
#      Disable undercover due to strange error only on circle
#      /home/circleci/project/vendor/bundle/ruby/3.3.0/gems/undercover-0.5.0/lib/undercover/changeset.rb:27:in `each_patch':
#  object not found - cannot read header for (edb67ef595741ed89a58df6a941a0272f2d4b218) (Rugged::OdbError)
#      - run:
#          name: Check coverage with undercover
#          command: |
#            bundle exec undercover -c origin/main -l coverage/lcov.info
      - store_test_results:
          path: /tmp/test-results/rspec
      - store_artifacts:
          path: ./coverage
      - notify_slack_on_failure

  integration_tests:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Run cucumber tests
          command: |
            bundle exec cucumber --format html --out report.html --format pretty
      - store_artifacts:
          path: ./report.html
      - notify_slack_on_failure

  check_swagger:
    executor: test-executor
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - run:
          name: Check for unapplied swagger documentation specs
          command: |
            bundle exec rails check_swaggerization
      - notify_slack_on_failure

  # The ECR.tf file in cloud-platform uses 'dev' for UAT tags
  # These tags ensure that ephemeral images get deleted after 30
  # days and do not contribute to the list of production images
  build_and_push_uat:
    executor: aws-ecr/default
    steps:
      - build_and_push:
          docker_tag: dev

  build_and_push_staging:
    executor: aws-ecr/default
    steps:
      - build_and_push:
          docker_tag: staging
      - notify_slack_on_failure

  build_and_push_staging_mtr:
    executor: aws-ecr/default
    steps:
      - build_and_push:
          docker_tag: latest
      - notify_slack_on_failure

  build_and_push_production:
    executor: aws-ecr/default
    steps:
      - build_and_push:
          docker_tag: latest
      - notify_slack_on_failure

  deploy_uat: &deploy_uat
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - run:
          name: Helm deployment to UAT
          command: |
            ./bin/uat_deploy
      - notify_slack_on_failure

  deploy_main_uat:
    <<: *deploy_uat

  deploy_staging:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - run:
          name: Helm deploy CFE Civil to Staging
          command: |
            helm upgrade cfe-civil ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values/staging.yaml \
                          --set image.repository="$ECR_ENDPOINT" \
                          --set image.tag="${CIRCLE_SHA1}"
      - notify_slack_on_failure

  deploy_staging_mtr:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - run:
          name: Helm deploy CFE Civil to Staging MTR
          command: |
            helm upgrade cfe-civil ./deploy/helm/. \
                          --install --wait \
                          --namespace=${K8S_NAMESPACE} \
                          --values ./deploy/helm/values/staging-mtr.yaml \
                          --set image.repository="$ECR_ENDPOINT" \
                          --set image.tag="${CIRCLE_SHA1}"
      - notify_slack_on_failure

  deploy_production:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - *restore_helm_cache
      - run:
          name: Helm deploy CFE Civil to Production
          command: |
            helm upgrade cfe-civil ./deploy/helm/. \
                            --install --wait \
                            --namespace=${K8S_NAMESPACE}  \
                            --values ./deploy/helm/values/production.yaml \
                            --set image.repository="$ECR_ENDPOINT" \
                            --set image.tag="${CIRCLE_SHA1}" \
      - notify_slack_on_failure

  delete_dependabot_deployment:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *authenticate_k8s
      - run:
          name: Delete dependabot deployment
          command: |
            ./bin/delete_dependabot_deployment

  deploy_infrastructure:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *authenticate_k8s
      - run:
          name: Deploy infrastructure
          command: |
            kubectl -n ${K8S_NAMESPACE} apply --record=false -f ./infrastructure/${K8S_NAMESPACE}/
      - notify_slack_on_failure

workflows:
  version: 2
  deploy_branch:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: main
      - unit_tests:
          filters:
            branches:
              ignore: main
      - create_helm_cache:
          filters:
            branches:
              ignore: main
      - end2end_tests:
          filters:
            branches:
              ignore: main
          requires:
            - build_and_push_uat
            - create_helm_cache
      - integration_tests:
          filters:
            branches:
              ignore: main
      - check_swagger:
          filters:
            branches:
              ignore: main
      - build_and_push_uat:
          context: cfe-civil-uat
          filters:
            branches:
              ignore: main
      - deploy_uat:
          context: cfe-civil-uat
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
            - end2end_tests
          filters:
            branches:
              ignore: main
      - delete_dependabot_deployment:
          context: cfe-civil-uat
          filters:
            branches:
              only:
                - /dependabot.*/
          requires:
            - deploy_uat

  deploy_main_approval_required:
    when: << pipeline.parameters.approval_required >>
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
      - unit_tests:
          filters:
            branches:
              only: main
      - build_and_push_staging:
          context: cfe-civil-staging
          filters:
            branches:
              only: main
      - build_and_push_staging_mtr:
          context: cfe-civil-staging-mtr
          filters:
            branches:
              only:
                - main
      - end2end_tests:
          filters:
            branches:
              only: main
          requires:
            - build_and_push_staging
            - create_helm_cache
      - integration_tests:
          filters:
            branches:
              only: main
      - deploy_infrastructure:
          name: deploy_infrastructure_uat
          context: cfe-civil-uat
          filters:
            branches:
              only: main
      - deploy_infrastructure:
          name: deploy_infrastructure_staging
          context: cfe-civil-staging
          filters:
            branches:
              only: main
      - deploy_infrastructure:
          name: deploy_infrastructure_production
          context: cfe-civil-production
          filters:
            branches:
              only: main
      - create_helm_cache:
          filters:
            branches:
              only: main
      - check_swagger:
          filters:
            branches:
              only: main
      - deploy_main_uat:
          context: cfe-civil-uat
          requires:
            - end2end_tests
          filters:
            branches:
              only: main
      - deploy_staging:
          context: cfe-civil-staging
          requires:
            - end2end_tests
          filters:
            branches:
              only:
                - main
      - deploy_staging_mtr:
          context: cfe-civil-staging-mtr
          requires:
            - end2end_tests
            - build_and_push_staging_mtr
          filters:
            branches:
              only:
                - main
      - build_and_push_production:
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
            - end2end_tests
          filters:
            branches:
              only: main
      - deploy_production_approval:
          type: approval
          requires:
            - build_and_push_production
          filters:
            branches:
              only:
                - main
      - deploy_production:
          context: cfe-civil-production
          requires:
            - deploy_production_approval
          filters:
            branches:
              only:
                - main

  deploy_main:
    unless: << pipeline.parameters.approval_required >>
    jobs:
      - lint_checks:
          filters:
            branches:
              only: main
      - unit_tests:
          filters:
            branches:
              only: main
      - build_and_push_staging:
          context: cfe-civil-staging
          filters:
            branches:
              only: main
      - build_and_push_staging_mtr:
          context: cfe-civil-staging-mtr
          filters:
            branches:
              only:
                - main
      - end2end_tests:
          filters:
            branches:
              only: main
          requires:
            - build_and_push_staging
            - create_helm_cache
      - integration_tests:
          filters:
            branches:
              only: main
      - create_helm_cache:
          filters:
            branches:
              only: main
      - check_swagger:
          filters:
            branches:
              only: main
      - build_and_push_production:
          requires:
            - lint_checks
            - check_swagger
            - unit_tests
            - integration_tests
            - deploy_staging
            - deploy_staging_mtr
      - deploy_main_uat:
          context: cfe-civil-uat
          requires:
            - end2end_tests
      - deploy_staging:
          context: cfe-civil-staging
          requires:
            - end2end_tests
          filters:
            branches:
              only:
                - main
      - deploy_staging_mtr:
          context: cfe-civil-staging-mtr
          requires:
            - end2end_tests
            - build_and_push_staging_mtr
          filters:
            branches:
              only:
                - main
      - deploy_production:
          context: cfe-civil-production
          requires:
            - end2end_tests
            - build_and_push_production
          filters:
            branches:
              only:
                - main
